<HTTP 헤더 개요>
* 헤더필드의 기본 문법 [field-name: OWS field-value OWS] (OWS = 띄어쓰기 가능)

* HTTP 전송에 필요한 모든 부가정보, 필요시 임의의 헤더 추가 가능

* 헤더의 종류
- Request 헤더 : 클라이언트의 요청 정보  ex> User-Agent: Mozilla/5.0....
- Response 헤더 : 서버의 응답 정보  ex> Server: Apache....
- General 헤더 : 메시지 전체에 적용되는 정보  ex> Connection, Upgrade-Insecure-Requests, ...
- Entity 헤더 : 엔티티 바디 정보  ex> Content-Type: text/html, Content-Length: 3423

* RFC7230 : 최신의 message body 표준
- Entity → Representation (표현) 으로 명칭을 변경
- Representation 헤더 : Representation Data 정보
ㄴ HTTP 메시지 본문 안에, 표현 데이터가 들어있고, 이에 대한 정보가 표현 헤더
(메시지 본문에 표현 데이터 외에 다른 내용이 들어갈수도 있나? 아직 모르겠음)


<표현> 표현헤더, 표현데이터
* 표현헤더는 전송, 응답에서 모두 사용된다
Content-Type : 형식
Content-Encoding : 압축 방식
Content-Language : 표현데이터의 자연언어
Content-Length : 길이

* Content-Type
- 미디어 타입 또는 문자 인코딩 정보를 가짐
ex> text/html; charset=utf-8
ex> application/json
ex> image/png

* Content-Encoding
- 데이터를 보내는 쪽에서 압축 후 인코딩 헤더 추가
- 데이터를 읽는 쪽에서 인코딩 헤더의 정보로 압축 해제
ex> gzip, deflate, identify

* Content-Language  ex> ko, en, en-US

* Content-Length
- 바이트 단위로 표현
- Transfer-Encoding(전송 코딩, 후에 배움)을 사용하면 이 헤더를 사용하면 안됨


<협상 - Content Negotiation>
* 클라이언트가 선호하는 표현을 서버로 요청하는것 - 요청시에만 사용하는 헤더
Accept : 미디어 타입
Accept-Charset : 문자 인코딩
Accept-Encoding : 압축 인코딩
Accept-Language : 자연 언어

* 협상 우선순위 : 0~1 (생략하면 1)
ex> 독일어,영어 순위로 지원하는 서버와 통신한다면?
ㄴ Accept-Language: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7

* 협상 우선순위 : 구체적으로 기재했을수록 우선한다
ex> Accept: text/*, text/plain, text/plain;format=flowed, */*
ㄴ 3,2,1,4의 우선순위를 가진다

* 협상 우선순위 : 구체적인것을 기준으로 미디어타입을 맞춘다 (?, 잘 안쓴다고 함)
- 필요하면 수업자료or검색


<전송 방식>
단순 전송
압축 전송
분할 전송
범위 전송

* 단순 전송 : 바디에 어떠한 가공도 없으므로 Content-Length를 통해 길이값을 표현할수 있음

* 압축 전송 : 보통의 경우, 길이가 절반이상 줄어든다 Content-Encoding

* 분할 전송
- 클라이언트에 먼저 도달하는 내용부터 처리해서 브라우저에 보여줄수 있다
- Content-Length가 헤더에 쓰일수 없고, 분할 전송되는 바디 안에 들어있다
ex> Transfer-Encoding: chunked [그림 7a]

* 범위 전송 : Range ←→ Content-Range
- 이미지 등 전송할때


<일반 정보>
From
Referer
User-Agent
Server
Date

* From : 유저의 이메일
- 잘 안쓰이고, 어쩌다 검색엔진에서 한번씩 씀

* Referer : 현재 요청된 페이지의 이전 웹페이지 주소 [그림 7b]
- 유입 경로 분석에 사용됨

* User-Agent : 클라이언트의 애플리케이션(브라우저) 정보
- 나중에 특정 브라우저에서 장애가 발생하는 타입의 문제를 빨리 파악 가능

* Server : 요청을 처리하는 ORIGIN 서버의 소프트웨어 정보
ㄴ 응답에서만 사용됨
- 수많은 캐시, 노드 서버들 말고 최초 발신지 서버 정보

* Date : 응답이 발생한 날짜와 시간
ㄴ 응답에서만 사용됨


<특별한 정보>
* Host : 진짜 중요. 요청의 필수값
- IP 한개에 여러 서버 애플리케이션이 구동되어 있을수 있다 : 가상 호스트
- Host에 도메인을 명시하지 않으면, 서버중에 어느 애플리케이션과 통신해야하는지 알수 없는 경우가 생길수 있음

* Location : 3xx 응답에서 리다이렉트에 쓰임
(앞에서 많이 말했다)

* Allow

* Retry-After : 503에서 언제까지 서비스불능인지 알려주는 내용


<인증>
* Authorization : 클라이언트의 인증 정보를 서버에 전달
ㄴ 인증 종류에 따라 내용이 다 달라서, 인증에 대해 다룰때 설명

* WWW-Authenticate : 401응답과 함께 사용됨
- 리소스 접근시 어떤 인증이 필요한지 응답해줌


<쿠키>
* HTTP는 무상태 프로토콜이다
ㄴ 클라이언트와 서버는 서로 상태를 유지하지 않는다
ㄴ 클라이언트와 서버가 요청-응답을 주고받으면 연결이 끊어진다
ㄴ (앞에 로그인 요청-응답이 있었다 한들) 클라이언트가 다음 요청을 하면, 서버는 이전 요청을 기억하지 못한다
- 모든 요청과 링크에 사용자 정보를 포함하면? : 보안, 메시지길이 등 문제가 한둘이 아님

[그림 7c]
[그림 7d]

* 쿠키
- 사용되는 곳 : 로그인 세션, 광고정보 트래킹
- 항상 서버에 발송된다
ㄴ 추가 트래픽을 유발하므로 최소한의 정보만 사용한다 (세션 id, 인증토큰 정도만)
ㄴ 보안에 민감한 데이터는 저장도, 사용도 하면 안됨 (주민번호, 신용카드번호 등)

* 쿠키의 생명주기
ㄴ 세션 쿠키 : 만료날짜를 생략해서, 브라우저 종료시까지만 유지
ㄴ 영속 쿠키 : 만료날짜를 입력해서, 해당 날짜까지 유지
** Set-Cookie: expires=Sat, 26-Dec-2020 00:00:00 GMT
- 만료일이 되면 쿠키 삭제
- 꼭 GMT로 기재
** Set-Cookie: max-age=3600
- 초단위로 지정. 0이나 음수를 지정하면 쿠키가 삭제됨

* 도메인
** 명시하는 경우 [domain=example.org]
- 서브 도메인도 쿠키 접근  ex> dev.example.org
** 생략하는 경우
- 서브 도메인은 쿠키 미접근

* 경로 : 명시한 경로와 그 하위경로만 쿠키 접근
- 일반적으로 [path=/] 루트로 지정

* 보안
- Secure : https에서만 쿠키 전송
- HttpOnly : 자바스크립트에서 쿠키 접근 불가 (XSS 공격 방지)
- SameSite : 요청도메인과 쿠키에 설정된 도메인이 같은 경우에만 쿠키 접근 가능 (XSRF 공격 방지)