<http api를 만들어보자>
* 요구사항정리

* uri 설계
- 리소스 식별을 할수있게 설계하는것이 제일 중요 → 리소스(명사)와 행위(동사)를 분리
- 그 리소스를 가지고 할 행위는 메서드가 될거다


<GET, POST> : 조회, 처리
* GET : 리소스를 조회한다. 보통 [경로?쿼리스트링] 으로 구성

* POST : 메시지바디를 통해 서버로 요청데이터를 전달해서 처리해달라 하는것 (신규 리소스 등록, 프로세스 처리 등)
ㄴ ex> 배달주문신규 <-> 주문을 조리상태에서 배달출발상태로
- post가 만든다 x : <악보를 그려서 전달한다 → 연주자는 악보읽는법에 따라 악보에 그려진것을 연주한다>
- 정말 다양한 분야 ex> 회원가입, 주문, 게시판글쓰기-댓글, 문서에 내용 추가 등등

* POST는 메시지바디를 사용하니 일반적으로 uri 활용하지 않음
- 리소스만으로 uri를 설계하면 제일 좋겠지만, 안되는 상황이 꼭 있음
- 동사로 명명 표현되는 uri = 컨트롤 uri
ㄴ [POST /orders/{orderId}/start-delivery http/1.1] 컨트롤uri가 적용되어 이와같은 헤더가 구성될수도 있는거임


<PUT, PATCH, DELETE> : 생성(대체), 부분변경, 삭제
* PUT : POST랑 비슷한데 "덮어쓰기"임
- 덮어쓰려면 리소스 위치를 알아야됨 /members/100 (<-> POST로 생성하면 /members/{userId}가 자동생성됨)
- 메시지바디를 통으로 덮어쓴다고 보면됨 : 이름,나이에서 나이만 put으로 보내면 이름 없어짐

* PATCH : 리소스 부분 변경
- 바로 위에 말한 : 이름,나이에서 나이만 patch로 보내서 수정할수 있음

* DELETE : 리소스 제거


<HTTP 메서드의 속성>
* 안전
- 호출해도 리소스를 변경하지 않는 메서드 (GET, ...)

* 멱등(Idempotent) : f(f(x)) = f(x)
- 몇번을 호출하든 결과가 똑같은 메서드 (GET, PUT, DELETE)
ㄴ POST는 당연히 아니겠지 ex> 결제요청을 여러번?
- 서버의 정상적인 응답을 듣지 못했을때 그냥 재요청을 보내도 되는 메서드들이다

* 메서드 속성들은 <해당 리소스에 대해서만 고려함, 외부요인으로 리소스 변경되는것은 고려하지않고>
- ex> 멱등 : GET-PUT-GET재요청 이거땜에 get호출의 결과가 달라져버리는것은 고려하지 않는다

* 캐시가능(Cacheable)
- 응답결과 리소스를 캐시해서 사용해도 되는가 여부 (GET, HEAD)
- POST, PATCH도 이론상 가능 : 본문내용까지 캐시 키로 고려해야해서 구현이 쉽지않아 거의 쓰이지 않음
